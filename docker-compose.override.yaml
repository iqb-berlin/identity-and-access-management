services:
  db:
    ports:
      - "${POSTGRES_PORT}:5432"

  keycloak:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.entrypoints=web, traefik"
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.${SERVER_NAME}`)"
      - "traefik.http.routers.keycloak.service=keycloak-identity-and-access-mangement@docker"
      - "traefik.docker.network=app-net"
    build:
      context: apps/keycloak
    command: [ 'start', '--hostname-strict=false --proxy=edge' ]
    #command: ['start', '--optimized']
    #command: ["-b", "0.0.0.0", "-Dkeycloak.profile.feature.docker=enabled"]
    environment:
      KC_HTTP_ENABLED: 'true'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      # ports:
      # - "8180:8080"
      # - "8787:8787" # debug port

  oauth2-proxy:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth2-proxy.entrypoints=web, traefik"
      - "traefik.http.routers.oauth2-proxy.rule=Host(`whoami.${SERVER_NAME}`)"
      #- "traefik.http.routers.oauth2-proxy.rule=Host(`whoami.${SERVER_NAME}`, `oauth.${SERVER_NAME}`) && PathPrefix(`/oauth2/`)"
      - "traefik.docker.network=app-net"
    command:
      - --provider=keycloak-oidc
      - --client-id=who-am-i
      - --client-secret=3igIiQMuWvb5QzpvWUwhPFIfIrMqgvzL
      - --redirect-url=http://whoami.localhost/oauth2/callback
      - --skip-oidc-discovery=true
      - --insecure-oidc-skip-issuer-verification=true
      - --oidc-issuer-url=http://keycloak.localhost/realms/iqb
      - --login-url=http://keycloak.localhost/realms/iqb/protocol/openid-connect/auth
      - --redeem-url=http://keycloak:8080/realms/iqb/protocol/openid-connect/token
      - --oidc-jwks-url=http://keycloak:8080/realms/iqb/protocol/openid-connect/certs
      #- --skip-jwt-bearer-tokens=true
      - --email-domain=iqb.hu-berlin.de
      - --insecure-oidc-allow-unverified-email=true
      - --scope=openid
      #- --pass-access-token=true
      - --skip-provider-button=true
      #- --cookie-csrf-per-request=true
      #- --skip-jwt-bearer-tokens=true
      #- --allowed-role=<realm role name> // Optional, required realm role
      #- --allowed-role=<client id>:<client role name> // Optional, required client role
      #- --allowed-group=</group name> // Optional, requires group client scope
      #- --code-challenge-method=S256
      - --upstream=http://whoami-service
      - --cookie-httponly=true
      - --cookie-secret=X1vMoWiAKwYXxBsdh4nALoRmV9SmGzkYg_jte9088GQ=
      - --cookie-secure=false
      - --reverse-proxy=true
      - --errors-to-info-log=true
      - --http-address
      - 0.0.0.0:4180
    expose:
      - 4180

  whoami-service:
    labels:
      - "traefik.enable=false"
      - "traefik.http.routers.whoami-service.entrypoints=web, traefik"
      - "traefik.http.routers.whoami-service.rule=Host(`whoami.${SERVER_NAME}`)"
      - "traefik.http.routers.whoami-service.middlewares=oauth-auth, oauth-errors"
      - "traefik.http.routers.whoami-service.service=whoami-service-identity-and-access-mangement@docker"
      - "traefik.http.middlewares.oauth-auth.forwardAuth.address=http://whoami.${SERVER_NAME}/oauth2/auth"
      - "traefik.http.middlewares.oauth-auth.forwardAuth.trustForwardHeader=true"
      - "traefik.http.middlewares.oauth-errors.errors.status=401-403"
      - "traefik.http.middlewares.oauth-errors.errors.service=oauth2-proxy-identity-and-access-mangement@docker"
      - "traefik.http.middlewares.oauth-errors.errors.query=/oauth2/sign_in"
      - "traefik.docker.network=app-net"
